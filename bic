#!/usr/bin/env bash

# Strict settings
set -o errexit
set -o pipefail
set -o nounset

# Magic variables
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "${__file}" .sh)"

# shellcheck disable=SC1091,SC1090
source "${__dir}"/lib/mo

# Based on https://github.com/davidmerfield/Blot/blob/03a99428e29b8ff5ecde09a9abf7011d38a64d93/app/build/converters/markdown/convert.js
# Full extensions: https://pandoc.org/MANUAL.html#extensions
PANDOC_EXTS="+autolink_bare_uris+gfm_auto_identifiers+task_lists"
PANDOC_ARGS=(-f markdown"${PANDOC_EXTS}" -t html5 --columns 1000 --no-highlight --email-obfuscation=none)

# Print out usage information
usage() {
  cat <<HEREDOC
Usage:
  ${__base} [<arguments>]
  Builds a static site (blog) from Markdown files.

Options:
  -h --help  Show this.
HEREDOC
}

fatal() {
  log "[FATAL] ${*:-}" 2>&1
  exit 1
}

warn() {
  log "[WARN] ${*:-}" 2>&1
}

log() {
  echo "${__base}: ${*:-}"
}

# slug-ify a string, modified from: https://blog.codeselfstudy.com/blog/how-to-slugify-strings-in-bash/
slugify() {
  echo "${1:-}" | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr '[:upper:]' '[:lower:]'
}

titlecase() {
  cat
  # echo "${1}"
}

html_escape() {
  echo "${1}"
}

# TODO: html escape + titlecase
mk_title() {
  head -n 1 < "${1}" | sed -E 's/^# //'
}

mk_body() {
  pandoc "${PANDOC_ARGS[@]}" <(tail -n +2 "${1}") || fatal "Pandoc error"
}

mk_slug() {
  slugify "${1}"
}

# TODO: config-driven format
mk_date() {
  date -r "${1}" "+%F"
}

# TODO: hashids, what should be the salt?
mk_id() {
  echo "${1%-${2}}"
}

# ---

build_pages() {
  ALL_PAGES=()
  [[ -d "${SRC_DIR}"/pages ]] && for page in "${SRC_DIR}"/pages/*.md; do
    log "Building page: ${page}"
    ALL_PAGES+=("${page}")
    local filename
    filename="$(basename "${page}")"

    (
      title="$(mk_title "${page}")"
      body="$(mk_body "${page}")"
      export title body
      mo \
        < "${SRC_DIR}"/page.html \
        > "${BUILD_DIR}/${filename%.md}.html"
    )
  done
  unset page
}

build_posts() {
  ALL_POSTS=()
  [[ -d "${SRC_DIR}"/posts ]] && for post in "${SRC_DIR}"/posts/*.md; do
    log "Building post: ${post}"
    ALL_POSTS+=("${post}")
    local filename filename_sans_id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"

    (
      title="$(mk_title "${post}")"
      body="$(mk_body "${post}")"
      date="$(mk_date "${post}")"
      slug="$(mk_slug "${filename_sans_id%.md}")"
      id="$(mk_id "${filename}" "${filename_sans_id}")"
      export title body date slug id
      mo \
        < "${SRC_DIR}"/entry.html \
        > "${BUILD_DIR}/${filename_sans_id%.md}.html"
    )
  done
  unset post
}

build_drafts() {
  ALL_DRAFTS=()
  [[ -d "${SRC_DIR}"/drafts ]] && for draft in "${SRC_DIR}"/drafts/*.md; do
    log "Building draft: ${draft}"
    ALL_DRAFTS+=("${draft}")
    local filename filename_sans_id
    filename="$(basename "${draft}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    mkdir -p "${SRC_DIR}"/build/drafts

    (
      title="$(mk_title "${draft}")"
      body="$(mk_body "${draft}")"
      date="$(mk_date "${draft}")"
      slug="$(mk_slug "${filename_sans_id%.md}")"
      id="$(mk_id "${filename}" "${filename_sans_id}")"
      export title body date slug id
      mo \
        < "${SRC_DIR}"/entry.html \
        > "${BUILD_DIR}/drafts/${filename_sans_id%.md}.html"
    )
  done
  unset draft
}

build_index() {
  log "Building index.html"

  local __index
  __index=""
  for post in "${ALL_POSTS[@]}"; do
    local filename filename_sans_id title date slug id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    title="$(mk_title "${post}")"
    date="$(mk_date "${post}")"
    slug="$(mk_slug "${filename_sans_id%.md}")"
    id="$(mk_id "${filename}" "${filename_sans_id}")"
    __index+="$(mo < "${SRC_DIR}"/__index.html)"
    __index+=$'\n'
  done

  (
    title="All posts"
    export __index title
    mo \
      < "${SRC_DIR}"/index.html \
      > "${BUILD_DIR}"/index.html
  )
}

build_static() {
  [[ -d "${SRC_DIR}"/static ]] && cp -a "${SRC_DIR}"/static/. "${SRC_DIR}"/build
}

build() {
  SRC_DIR="${1:-$__dir}"
  BUILD_DIR="${SRC_DIR}/build"
  log "Using source directory: ${SRC_DIR}"

  [[ -d "${SRC_DIR}/pages" && -f "${SRC_DIR}/page.html"  ]] || warn "pages/ + page.html for pages"
  [[ -d "${SRC_DIR}/posts" && -f "${SRC_DIR}/entry.html" ]] || warn "posts/ + entry.html for posts"
  [[ -f "${SRC_DIR}/index.html" ]] || fatal "index.html required"

  [[ -d "${BUILD_DIR}" ]] && rm -rf "${BUILD_DIR}"
  mkdir -p "${BUILD_DIR}" && log "Created build directory: ${BUILD_DIR}"

  build_pages
  build_posts
  build_drafts
  build_index
  # build_sitemap
  # build_feed
  build_static
}

# Drive it
main() {
  # Parse arguments
  if [[ "${1:-}" =~ ^-h|--help$ ]]; then
    usage
  else
    build "${1:-}"
  fi
}

# Call it
main "${@:-}"
