#!/usr/bin/env bash
#
# bic - minimal static site/blog generator.
# Paul Esch-Laurent <p@uly.io>
# MIT licensed: https://pinjasaur.mit-license.org/

# Strict settings
set -o errexit
set -o pipefail
set -o nounset

# "Magic" variables
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "${__file}" .sh)"

# shellcheck disable=SC1091,SC1090
source "${__dir}"/lib/mo

# Based on https://github.com/davidmerfield/Blot/blob/03a99428e29b8ff5ecde09a9abf7011d38a64d93/app/build/converters/markdown/convert.js
# Full extensions: https://pandoc.org/MANUAL.html#extensions
PANDOC_EXTS="+autolink_bare_uris+gfm_auto_identifiers+task_lists"
PANDOC_ARGS=(-f markdown"${PANDOC_EXTS:-}" -t html5 --columns 1000 --no-highlight --email-obfuscation=none)

# Print out usage information
usage() {
  cat <<HEREDOC
Usage:
  ${__base} [<arguments>]
  Builds a static site (blog) from Markdown files.

Options:
  -h --help  Show this.
HEREDOC
}

fatal() {
  log "[FATAL] ${*:-}" 1>&2
  exit 1
}

warn() {
  log "[WARN] ${*:-}" 1>&2
}

log() {
  echo "${__base}: ${*:-}"
}

# slug-ify a string, modified from: https://blog.codeselfstudy.com/blog/how-to-slugify-strings-in-bash/
slugify() {
  echo "${1:-}" | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr '[:upper:]' '[:lower:]'
}

html_escape() {
  echo "${1:-}" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
}

mk_title() {
  html_escape "$(head -n 1 < "${1}" | sed -E 's/^# //')"
}

mk_body() {
  pandoc "${PANDOC_ARGS[@]}" <(tail -n +2 "${1}")
}

mk_slug() {
  slugify "${1}"
}

mk_date() {
  TZ="${TIMEZONE}" date -r "${1}" "${DATE_FORMAT}"
}

mk_id() {
   local -r hashid="$("${__dir}"/lib/bashids -e -s "${SALT:-bic}" -l 28 "${1%-"${2}"}")"
   echo "${__base}_${hashid}"
}

# --- The "line" between utility and core functions. ---

# `source` a file: https://stackoverflow.com/a/30969768
src() {
  # set -o allexport # enable exporting (even if not specified in file)
  # shellcheck disable=SC1090
  source "${1}"
  # set +o allexport # disable
}

build_pages() {
  [[ ! -d "${SRC_DIR}"/pages || ! -f "${SRC_DIR}"/page.html ]] && return
  ALL_PAGES=()
  for page in "${SRC_DIR}"/pages/*.md; do
    log "Building page: ${page}"
    ALL_PAGES+=("${page}")
    local filename slug
    filename="$(basename "${page}")"

    (
      title="$(mk_title "${page}")"
      body="$(mk_body "${page}")"
      slug="$(slugify "${filename%.md}")"
      export title body slug
      mo \
        "${SRC_DIR}"/page.html \
        > "${DEST_DIR}/${slug}.html"
    )
  done
  unset page
}

build_posts() {
  [[ ! -d "${SRC_DIR}"/posts || ! -f "${SRC_DIR}"/entry.html ]] && return
  ALL_POSTS=()
  for post in "${SRC_DIR}"/posts/*.md; do
    log "Building post: ${post}"
    ALL_POSTS+=("${post}")
    local filename filename_sans_id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"

    (
      title="$(mk_title "${post}")"
      body="$(mk_body "${post}")"
      date="$(mk_date "${post}")"
      slug="$(mk_slug "${filename_sans_id%.md}")"
      id="$(mk_id "${filename}" "${filename_sans_id}")"
      export title body date slug id
      mo \
        "${SRC_DIR}"/entry.html \
        > "${DEST_DIR}/${slug}.html"
    )
  done
  unset post
}

build_drafts() {
  [[ ! -d "${SRC_DIR}"/drafts || ! -f "${SRC_DIR}"/entry.html ]] && return
  ALL_DRAFTS=()
  for draft in "${SRC_DIR}"/drafts/*.md; do
    log "Building draft: ${draft}"
    ALL_DRAFTS+=("${draft}")
    local filename filename_sans_id
    filename="$(basename "${draft}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    mkdir -p "${DEST_DIR}"/drafts

    (
      title="$(mk_title "${draft}")"
      body="$(mk_body "${draft}")"
      date="$(mk_date "${draft}")"
      slug="$(mk_slug "${filename_sans_id%.md}")"
      id="$(mk_id "${filename}" "${filename_sans_id}")"
      export title body date slug id
      mo \
        "${SRC_DIR}"/entry.html \
        > "${DEST_DIR}/drafts/${slug}.html"
    )
  done
  unset draft
}

build_index() {
  log "Building index.html"

  local __index
  __index=""
  for post in "${ALL_POSTS[@]}"; do
    local filename filename_sans_id title date slug id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    title="$(mk_title "${post}")"
    date="$(mk_date "${post}")"
    slug="$(mk_slug "${filename_sans_id%.md}")"
    id="$(mk_id "${filename}" "${filename_sans_id}")"
    __index+="$(mo "${SRC_DIR}"/__index.html)"
    __index+=$'\n'
  done

  (
    title="All posts"
    export __index title
    mo \
      "${SRC_DIR}"/index.html \
      > "${DEST_DIR}"/index.html
  )
}

build_sitemap() {
  [[ ! -f "${SRC_DIR}/sitemap.xml" ]] && return
  log "Building sitemap.xml"

  local slugs
  slugs=()

  for page in "${ALL_PAGES[@]}"; do
    local filename filename_sans_id title date slug id
    filename="$(basename "${page}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    slug="$(mk_slug "${filename_sans_id%.md}")"
    slugs+=("$(html_escape "${slug}")")
  done

  for post in "${ALL_POSTS[@]}"; do
    local filename filename_sans_id title date slug id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    slug="$(mk_slug "${filename_sans_id%.md}")"
    slugs+=("$(html_escape "${slug}")")
  done

  (
    export slugs
    mo \
      "${SRC_DIR}"/sitemap.xml \
      > "${DEST_DIR}"/sitemap.xml
  )
  unset slugs
}

build_robots() {
  [[ ! -f "${SRC_DIR}/robots.txt" ]] && return
  log "Building robots.txt"

  (
    mo \
      "${SRC_DIR}"/robots.txt \
      > "${DEST_DIR}"/robots.txt
  )
}

build_feed() {
  [[ ! -f "${SRC_DIR}/feed.rss" || ! -f "${SRC_DIR}"/__feed.rss ]] && return
  log "Building feed.rss"

  local __feed
  __feed=""
  for post in "${ALL_POSTS[@]}"; do
    local filename filename_sans_id title body date slug id
    filename="$(basename "${post}")"
    filename_sans_id="$(echo "${filename}" | sed -E 's/^[0-9]+-//')"
    title="$(mk_title "${post}")"
    body="$(mk_body "${post}")"
    date="$(DATE_FORMAT="-R" mk_date "${post}")"
    slug="$(mk_slug "${filename_sans_id%.md}")"
    id="$(mk_id "${filename}" "${filename_sans_id}")"
    __feed+="$(mo "${SRC_DIR}"/__feed.rss)"
    __feed+=$'\n'
  done

  (
    export __feed
    mo \
      "${SRC_DIR}"/feed.rss \
      > "${DEST_DIR}"/feed.rss
  )
}

build_static() {
  [[ ! -d "${SRC_DIR}"/static ]] && return
  log "Building /static -> /"
  cp -a "${SRC_DIR}"/static/. "${DEST_DIR}"
}

build() {
  src "${__dir}"/.env && log "Application .env sourced"
  SRC_DIR="${1:-$__dir}"
  # Only source if it's actually custom
  [[ "${SRC_DIR}" != "${__dir}" ]] && [[ -f "${SRC_DIR}"/.env ]] && src "${SRC_DIR}"/.env && log "Custom .env sourced"
  DEST_DIR="${SRC_DIR}/${BUILD_DIR:-build}"
  log "Using source directory: ${SRC_DIR}"

  [[ -d "${SRC_DIR}"/pages && -f "${SRC_DIR}"/page.html  ]] || warn "pages/ + page.html for pages"
  [[ -d "${SRC_DIR}"/posts && -f "${SRC_DIR}"/entry.html ]] || warn "posts/ + entry.html for posts"

  [[ -f "${SRC_DIR}"/index.html && -f "${SRC_DIR}"/__index.html ]]  || fatal "index.html (and __index.html) required"
  [[ -f "${SRC_DIR}"/feed.rss   && -f "${SRC_DIR}"/__feed.rss ]]    || warn "feed.rss (and __feed.rss) isn't required, but you likely want it"
  [[ -f "${SRC_DIR}"/sitemap.xml ]] || warn "sitemap.xml isn't required, but you likely want it"
  [[ -f "${SRC_DIR}"/robots.txt ]]  || warn "robots.txt isn't required, but you likely want it"

  [[ -d "${DEST_DIR}" ]] && rm -rf "${DEST_DIR}"
  mkdir -p "${DEST_DIR}" && log "Created build directory: ${DEST_DIR}"

  SITE_AUTHOR="$(html_escape "${SITE_AUTHOR}")"
  SITE_TITLE="$(html_escape "${SITE_TITLE}")"

  build_pages   # side effect(s): $ALL_PAGES
  build_posts   # side effect(s): $ALL_POSTS
  build_drafts  # side effect(s): $ALL_DRAFTS
  build_index   # uses $ALL_POSTS
  build_sitemap # uses $ALL_PAGES, $ALL_POSTS
  build_robots
  build_feed    # uses $ALL_POSTS
  build_static
}

# Drive it
main() {
  # Parse arguments
  if [[ "${1:-}" =~ ^-h|--help$ ]]; then
    usage
  else
    build "${1:-}"
  fi
}

# Call it
main "${@:-}"
